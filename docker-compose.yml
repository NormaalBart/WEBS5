version: '3.8'

services:
  apigateway:
    build:
      context: ./apigateway
      dockerfile: /Dockerfile
    volumes:
      - ./apigateway:/app
    ports:
      - "3000:3000"
    depends_on:
      - authservice
    environment:
      IMAGE_SERVICE: ${IMAGE_SERVICE}
      AUTH_SERVICE: ${AUTH_SERVICE}
      TARGET_SERVICE: ${TARGET_SERVICE}
      SCORE_SERVICE: ${SCORE_SERVICE}
      TIMING_SERVICE: ${TIMING_SERVICE}
    restart: always
  imageservice:
    build:
      context: ./imageservice
      dockerfile: /Dockerfile
    volumes:
      - ./imageservice:/app
      - ./data/images:/app/images
    depends_on:
      imageservicedb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: ${IMAGE_SERVICE_DB}
      PORT: ${EXPRESS_PORT}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_MAIL_CHANNEL: ${RABBITMQ_MAIL_CHANNEL}
      RABBITMQ_TARGET_IMAGE_CHANNEL: ${RABBITMQ_TARGET_IMAGE_CHANNEL}
      RABBITMQ_SCORE_CHANNEL: ${RABBITMQ_SCORE_CHANNEL}
      RABBITMQ_DELETE_CHANNEL: ${RABBITMQ_DELETE_CHANNEL}
      RABBITMQ_CREATE_CHANNEL: ${RABBITMQ_CREATE_CHANNEL}
    restart: always
  imageservicedb:
    image: postgres:16
    volumes:
      - ./data/imageservice:/var/lib/postgresql/data
      - ./databasescripts/imageservice.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5
  authservice:
    build:
      context: ./authservice
      dockerfile: /Dockerfile
    volumes:
      - ./authservice:/app
    depends_on:
      authservicedb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: ${AUTH_SERVICE_DB}
      PORT: ${EXPRESS_PORT}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_MAIL_CHANNEL: ${RABBITMQ_MAIL_CHANNEL}
    restart: always
  authservicedb:
    image: postgres:16
    volumes:
      - ./data/authservice:/var/lib/postgresql/data
      - ./databasescripts/authservice.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 5
  targetservice:
    build:
      context: ./targetservice
      dockerfile: /Dockerfile
    volumes:
      - ./targetservice:/app
      - ./data/images:/app/images
    depends_on:
      targetservicedb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: ${TARGET_SERVICE_DB}
      PORT: ${EXPRESS_PORT}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_TARGET_IMAGE_CHANNEL: ${RABBITMQ_TARGET_IMAGE_CHANNEL}
      RABBITMQ_SCORE_CHANNEL: ${RABBITMQ_SCORE_CHANNEL}
      RABBITMQ_DELETE_CHANNEL: ${RABBITMQ_DELETE_CHANNEL}
      RABBITMQ_CREATE_CHANNEL: ${RABBITMQ_CREATE_CHANNEL}
    restart: always
  targetservicedb:
    image: postgres:16
    volumes:
      - ./data/targetservice:/var/lib/postgresql/data
      - ./databasescripts/targetservice.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 5
  mailservice:
    build:
      context: ./mailservice
      dockerfile: /Dockerfile
    volumes:
      - ./mailservice:/app
    depends_on:
      mailhog:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      MAIL_HOG: ${MAIL_SERVER}
      RABBITMQ_MAIL_CHANNEL: ${RABBITMQ_MAIL_CHANNEL}
      RABBITMQ_URL: ${RABBITMQ_URL}
  scoreservice:
    build:
      context: ./scoreservice
      dockerfile: /Dockerfile
    volumes:
      - ./scoreservice:/app
      - ./data/images:/app/images
    depends_on:
      scoreservicedb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      PORT: ${EXPRESS_PORT}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_SCORE_CHANNEL: ${RABBITMQ_SCORE_CHANNEL}
      DATABASE_URL: ${SCORE_SERVICE_DB}
      IMAGGA_USERNAME: ${IMAGGA_USERNAME}
      IMAGGA_PASSWORD: ${IMAGGA_PASSWORD}
      RABBITMQ_DELETE_CHANNEL: ${RABBITMQ_DELETE_CHANNEL}
      RABBITMQ_CREATE_CHANNEL: ${RABBITMQ_CREATE_CHANNEL}
    restart: always
  scoreservicedb:
    image: postgres:16
    volumes:
      - ./data/scoreservice:/var/lib/postgresql/data
      - ./databasescripts/scoreservice.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 5
  timingservice:
    build:
      context: ./timingservice
      dockerfile: /Dockerfile
    volumes:
      - ./timingservice:/app
    depends_on:
      timingservicedb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      PORT: ${EXPRESS_PORT}
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_SCORE_CHANNEL: ${RABBITMQ_SCORE_CHANNEL}
      DATABASE_URL: ${TIMING_SERVICE_DB}
      RABBITMQ_CREATE_CHANNEL: ${RABBITMQ_CREATE_CHANNEL}
      RABBITMQ_DELETE_CHANNEL: ${RABBITMQ_DELETE_CHANNEL}
    restart: always
  timingservicedb:
    image: postgres:16
    volumes:
      - ./data/timingservice:/var/lib/postgresql/data
      - ./databasescripts/timingservice.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 5
  mailhog:
    image: mailhog/mailhog
    environment:
      MH_STORAGE: ${MAIL_HOG_STORAGE}
      MH_MAILDIR_PATH: ${MAIL_HOG_MAILDIR_PATH}
    volumes:
      - ./data/mailhog:/home/mailhog
    ports:
      - "8025:8025" # Web interface
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 5
  rabbitmq:
    image: "rabbitmq:3.13-management"
    volumes:
      - "./data/rabbitmq:/var/lib/rabbitmq"
    ports:
      - "15672:15672" # Web management interface
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 5s
      retries: 5